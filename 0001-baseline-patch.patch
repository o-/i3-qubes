From 5bc959f0e34d2257d36d4be96d774b66e0c2c93e Mon Sep 17 00:00:00 2001
From: o <o@immerda.ch>
Date: Sat, 2 Apr 2016 21:45:25 +0200
Subject: [PATCH 1/4] baseline patch

---
 include/atoms.xmacro |  2 ++
 include/data.h       |  6 ++++++
 include/window.h     | 14 +++++++++++++
 src/commands.c       | 18 ++++++++---------
 src/config.c         |  6 ++++++
 src/manage.c         |  6 +++++-
 src/window.c         | 51 +++++++++++++++++++++++++++++++++++++++++++++++
 src/x.c              | 56 +++++++++++++++++++++++++++++++++++++++++++---------
 8 files changed, 139 insertions(+), 20 deletions(-)

diff --git a/include/atoms.xmacro b/include/atoms.xmacro
index 90b0261..bbff477 100644
--- a/include/atoms.xmacro
+++ b/include/atoms.xmacro
@@ -34,3 +34,5 @@ xmacro(I3_PID)
 xmacro(_NET_REQUEST_FRAME_EXTENTS)
 xmacro(_NET_FRAME_EXTENTS)
 xmacro(_MOTIF_WM_HINTS)
+xmacro(_QUBES_VMNAME)
+xmacro(_QUBES_LABEL)
diff --git a/include/data.h b/include/data.h
index 6ac228e..43cd8de 100644
--- a/include/data.h
+++ b/include/data.h
@@ -348,6 +348,12 @@ struct Window {
     /** The name of the window. */
     i3String *name;
 
+    /** The name of the qubes vm. */
+    i3String *qubes_vmname;
+
+    /** The qubes label. */
+    int qubes_label;
+
     /** The WM_WINDOW_ROLE of this window (for example, the pidgin buddy window
      * sets "buddy list"). Useful to match specific windows in assignments or
      * for_window. */
diff --git a/include/window.h b/include/window.h
index 480cee1..b8d50b3 100644
--- a/include/window.h
+++ b/include/window.h
@@ -33,6 +33,20 @@ void window_update_name(i3Window *win, xcb_get_property_reply_t *prop, bool befo
 void window_update_name_legacy(i3Window *win, xcb_get_property_reply_t *prop, bool before_mgmt);
 
 /**
+ * Updates the qubes vmname by using _QUBES_VMNAME (encoded in UTF-8) for the given
+ * window.
+ *
+ */
+void window_update_qubes_vmname(i3Window *win, xcb_get_property_reply_t *prop, bool before_mgmt);
+
+/**
+ * Updates the qubes label by using _QUBES_LABEL (encoded in UTF-8) for the given
+ * window.
+ *
+ */
+void window_update_qubes_label(i3Window *win, xcb_get_property_reply_t *prop, bool before_mgmt);
+
+/**
  * Updates the CLIENT_LEADER (logical parent window).
  *
  */
diff --git a/src/commands.c b/src/commands.c
index 03bb10a..1e257e8 100644
--- a/src/commands.c
+++ b/src/commands.c
@@ -837,22 +837,20 @@ void cmd_border(I3_CMD, char *border_style_str, char *border_width) {
             border_style++;
             border_style %= 3;
             if (border_style == BS_NORMAL)
-                tmp_border_width = 2;
-            else if (border_style == BS_NONE)
-                tmp_border_width = 0;
-            else if (border_style == BS_PIXEL)
-                tmp_border_width = 1;
+                tmp_border_width = 3;
+            else if (border_style == BS_NONE ||
+                     border_style == BS_PIXEL)
+                tmp_border_width = 3;
         } else {
             if (strcmp(border_style_str, "normal") == 0)
                 border_style = BS_NORMAL;
             else if (strcmp(border_style_str, "pixel") == 0)
                 border_style = BS_PIXEL;
-            else if (strcmp(border_style_str, "1pixel") == 0) {
+            else if (strcmp(border_style_str, "1pixel") == 0 ||
+                     strcmp(border_style_str, "none") == 0) {
                 border_style = BS_PIXEL;
-                tmp_border_width = 1;
-            } else if (strcmp(border_style_str, "none") == 0)
-                border_style = BS_NONE;
-            else {
+                tmp_border_width = 3;
+            } else {
                 ELOG("BUG: called with border_style=%s\n", border_style_str);
                 ysuccess(false);
                 return;
diff --git a/src/config.c b/src/config.c
index 7e88a9e..a2735ca 100644
--- a/src/config.c
+++ b/src/config.c
@@ -264,6 +264,12 @@ void load_configuration(xcb_connection_t *conn, const char *override_configpath,
 
     parse_configuration(override_configpath);
 
+    /* redefine defaults, to overwrite user settings easily */
+    config.default_border = BS_NORMAL;
+    config.default_floating_border = BS_NORMAL;
+    config.default_border_width = logical_px(2);
+    config.default_floating_border_width = logical_px(2);
+
     if (reload) {
         translate_keysyms();
         grab_all_keys(conn, false);
diff --git a/src/manage.c b/src/manage.c
index 8f442e0..c236e68 100644
--- a/src/manage.c
+++ b/src/manage.c
@@ -87,7 +87,7 @@ void manage_window(xcb_window_t window, xcb_get_window_attributes_cookie_t cooki
     xcb_get_window_attributes_reply_t *attr = NULL;
 
     xcb_get_property_cookie_t wm_type_cookie, strut_cookie, state_cookie,
-        utf8_title_cookie, title_cookie,
+        utf8_title_cookie, title_cookie, qubes_vmname_cookie, qubes_label_cookie,
         class_cookie, leader_cookie, transient_cookie,
         role_cookie, startup_id_cookie, wm_hints_cookie,
         wm_normal_hints_cookie, motif_wm_hints_cookie;
@@ -152,6 +152,8 @@ void manage_window(xcb_window_t window, xcb_get_window_attributes_cookie_t cooki
     strut_cookie = GET_PROPERTY(A__NET_WM_STRUT_PARTIAL, UINT32_MAX);
     state_cookie = GET_PROPERTY(A__NET_WM_STATE, UINT32_MAX);
     utf8_title_cookie = GET_PROPERTY(A__NET_WM_NAME, 128);
+    qubes_vmname_cookie = GET_PROPERTY(A__QUBES_VMNAME, 128);
+    qubes_label_cookie = GET_PROPERTY(A__QUBES_LABEL, UINT32_MAX);
     leader_cookie = GET_PROPERTY(A_WM_CLIENT_LEADER, UINT32_MAX);
     transient_cookie = GET_PROPERTY(XCB_ATOM_WM_TRANSIENT_FOR, UINT32_MAX);
     title_cookie = GET_PROPERTY(XCB_ATOM_WM_NAME, 128);
@@ -188,6 +190,8 @@ void manage_window(xcb_window_t window, xcb_get_window_attributes_cookie_t cooki
     window_update_class(cwindow, xcb_get_property_reply(conn, class_cookie, NULL), true);
     window_update_name_legacy(cwindow, xcb_get_property_reply(conn, title_cookie, NULL), true);
     window_update_name(cwindow, xcb_get_property_reply(conn, utf8_title_cookie, NULL), true);
+    window_update_qubes_vmname(cwindow, xcb_get_property_reply(conn, qubes_vmname_cookie, NULL), true);
+    window_update_qubes_label(cwindow, xcb_get_property_reply(conn, qubes_label_cookie, NULL), true);
     window_update_leader(cwindow, xcb_get_property_reply(conn, leader_cookie, NULL));
     window_update_transient_for(cwindow, xcb_get_property_reply(conn, transient_cookie, NULL));
     window_update_strut_partial(cwindow, xcb_get_property_reply(conn, strut_cookie, NULL));
diff --git a/src/window.c b/src/window.c
index 538f462..5c18219 100644
--- a/src/window.c
+++ b/src/window.c
@@ -120,6 +120,57 @@ void window_update_name_legacy(i3Window *win, xcb_get_property_reply_t *prop, bo
 }
 
 /*
+ * Updates the qubes vmname by using _QUBES_VMNAME (encoded in UTF-8) for the given
+ * window.
+ *
+ */
+void window_update_qubes_vmname(i3Window *win, xcb_get_property_reply_t *prop, bool before_mgmt) {
+    if (prop == NULL || xcb_get_property_value_length(prop) == 0) {
+        win->qubes_vmname = i3string_from_utf8("dom0");
+        FREE(prop);
+        return;
+    }
+
+    i3string_free(win->qubes_vmname);
+    win->qubes_vmname = i3string_from_utf8_with_length(xcb_get_property_value(prop),
+                                                       xcb_get_property_value_length(prop));
+    LOG("_QUBES_VMNAME set to \"%s\"\n", i3string_as_utf8(win->qubes_vmname));
+
+    if (before_mgmt) {
+        free(prop);
+        return;
+    }
+
+    run_assignments(win);
+
+    free(prop);
+}
+
+/*
+ * Updates the qubes label by using _QUBES_LABEL (encoded in UTF-8) for the given
+ * window.
+ *
+ */
+void window_update_qubes_label(i3Window *win, xcb_get_property_reply_t *prop, bool before_mgmt) {
+    if (prop == NULL || xcb_get_property_value_length(prop) == 0) {
+        win->qubes_label = 0;
+        FREE(prop);
+        return;
+    }
+
+    win->qubes_label = *(int*) xcb_get_property_value(prop);
+
+    if (before_mgmt) {
+        free(prop);
+        return;
+    }
+
+    run_assignments(win);
+
+    free(prop);
+}
+
+/*
  * Updates the CLIENT_LEADER (logical parent window).
  *
  */
diff --git a/src/x.c b/src/x.c
index ee638fc..89a0eff 100644
--- a/src/x.c
+++ b/src/x.c
@@ -341,10 +341,10 @@ void x_draw_decoration(Con *con) {
     /* find out which colors to use */
     if (con->urgent)
         p->color = &config.client.urgent;
-    else if (con == focused || con_inside_focused(con))
-        p->color = &config.client.focused;
-    else if (con == TAILQ_FIRST(&(parent->focus_head)))
-        p->color = &config.client.focused_inactive;
+    // else if (con == focused || con_inside_focused(con))
+        // p->color = &config.client.focused;
+    // else if (con == TAILQ_FIRST(&(parent->focus_head)))
+        // p->color = &config.client.focused_inactive;
     else
         p->color = &config.client.unfocused;
 
@@ -407,6 +407,39 @@ void x_draw_decoration(Con *con) {
         xcb_poly_fill_rectangle(conn, con->pixmap, con->pm_gc, sizeof(background) / sizeof(xcb_rectangle_t), background);
     }
 
+    struct Window *win = con->window;
+    if (win != NULL) {
+        DLOG("con->qubes_label is %d\n", win->qubes_label);
+        if (win->qubes_label == 0) { // dom0
+            p->color->background = get_colorpixel("#000000");
+            p->color->text = get_colorpixel("#ffffff");
+        } else if (win->qubes_label == 1) { // red
+            p->color->background = get_colorpixel("#ff0000");
+            p->color->text = get_colorpixel("#000000");
+        } else if (win->qubes_label == 2) { // orange
+            p->color->background = get_colorpixel("#FFA500");
+            p->color->text = get_colorpixel("#0059FF");
+        } else if (win->qubes_label == 3) { // yellow
+            p->color->background = get_colorpixel("#ffff00");
+            p->color->text = get_colorpixel("#000000");
+        } else if (win->qubes_label == 4) { // green
+            p->color->background = get_colorpixel("#347235");
+            p->color->text = get_colorpixel("#ffffff");
+        } else if (win->qubes_label == 5) { // gray
+            p->color->background = get_colorpixel("#848482");
+            p->color->text = get_colorpixel("#ffffff");
+        } else if (win->qubes_label == 6) { // blue
+            p->color->background = get_colorpixel("#2B65EC");
+            p->color->text = get_colorpixel("#000000");
+        } else if (win->qubes_label == 7) { // purple
+            p->color->background = get_colorpixel("#7D1B7E");
+            p->color->text = get_colorpixel("#ffffff");
+        } else if (win->qubes_label == 8) { // black
+            p->color->background = get_colorpixel("#000000");
+            p->color->text = get_colorpixel("#ffffff");
+        }
+    }
+
     /* 3: draw a rectangle in border color around the client */
     if (p->border_style != BS_NONE && p->con_is_leaf) {
         /* We might hide some borders adjacent to the screen-edge */
@@ -492,7 +525,6 @@ void x_draw_decoration(Con *con) {
     set_font_colors(parent->pm_gc, p->color->text, p->color->background);
     int text_offset_y = (con->deco_rect.height - config.font.height) / 2;
 
-    struct Window *win = con->window;
     if (win == NULL) {
         /* we have a split container which gets a representation
          * of its children as title
@@ -531,10 +563,16 @@ void x_draw_decoration(Con *con) {
     //DLOG("indent_level = %d, indent_mult = %d\n", indent_level, indent_mult);
     int indent_px = (indent_level * 5) * indent_mult;
 
-    draw_text(win->name,
-              parent->pixmap, parent->pm_gc,
-              con->deco_rect.x + 2 + indent_px, con->deco_rect.y + text_offset_y,
-              con->deco_rect.width - 2 - indent_px);
+    /* set window title, include qubes vmname */
+    char *vmname_and_name;
+    sasprintf(&vmname_and_name, "[%s] %s", i3string_as_utf8(win->qubes_vmname), i3string_as_utf8(win->name));
+
+    draw_text_ascii(vmname_and_name,
+                    parent->pixmap, parent->pm_gc,
+                    con->deco_rect.x + 2 + indent_px, con->deco_rect.y + text_offset_y,
+                    con->deco_rect.width - 2 - indent_px);
+
+   free(vmname_and_name);
 
 after_title:
     /* Since we don’t clip the text at all, it might in some cases be painted
-- 
2.5.5

